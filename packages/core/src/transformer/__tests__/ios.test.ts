import { EOL } from 'os';
import transformer from '../ios.js';
import { describe, it, expect } from 'vitest';

describe('iOSTransformer.transformComment', () => {
    it('transforms comment', () => {
        const result = transformer.transformComment('un commentaire');

        expect(result).toEqual('// un commentaire');
    });
});

describe('iOSTransformer.transformKeyValue', () => {
    it('transforms key value', () => {
        const line = transformer.transformKeyValue('ma_cle', 'La valeur');
        expect(line).toEqual('"ma_cle" = "La valeur";');
    });

    it('escapes quote', () => {
        const line = transformer.transformKeyValue('ma_cle', 'La "valeur"');
        expect(line).toEqual('"ma_cle" = "La \\"valeur\\"";');
    });
});

describe('iOSTransformer.insert', () => {
    it('should insert after when not empty', async () => {
        const result = await transformer.insert('// header' + EOL + '"aa" = "bb";' + EOL, 'à insérer');
        expect(result).toEqual(
            '// header' + EOL + '"aa" = "bb";' + EOL + transformer.AUTOGENERATED_TAG + EOL + 'à insérer',
        );
    });

    it('should replace it when has auto generate tag should', async () => {
        const result = await transformer.insert(
            '// header' + EOL + transformer.AUTOGENERATED_TAG + EOL + 'à effacer',
            'à insérer',
        );
        expect(result).toEqual('// header' + EOL + transformer.AUTOGENERATED_TAG + EOL + 'à insérer');
    });

    it('should insert after same as before if new value doesnt change', async () => {
        const before = '// header' + EOL + transformer.AUTOGENERATED_TAG + EOL + 'before';
        const result = await transformer.insert(before, 'before');
        expect(result).toEqual(before);
    });
});
