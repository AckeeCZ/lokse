import { EOL } from 'os';
import transformer from '../android.js';
import { describe, it, expect } from 'vitest';

describe('AndroidTransformer.transformComment', () => {
    it('transforms comment', () => {
        const result = transformer.transformComment('un commentaire');

        expect(result).toEqual('    <!-- un commentaire -->');
    });
});

describe('AndroidTransformer.transformKeyValue', () => {
    it('transforms key value', () => {
        const line = transformer.transformKeyValue('ma_cle', 'La valeur');
        expect(line).toEqual('    <string name="ma_cle">La valeur</string>');
    });

    it('transforms multiple format', () => {
        const line = transformer.transformKeyValue('ma_cle', 'La valeur %s et %s');
        expect(line).toEqual('    <string name="ma_cle">La valeur %1$s et %2$s</string>');
    });

    it('transforms single format', () => {
        const line = transformer.transformKeyValue('ma_cle', 'La valeur %s');
        expect(line).toEqual('    <string name="ma_cle">La valeur %1$s</string>');
    });

    it('escapes amp', () => {
        const line = transformer.transformKeyValue('ma_cle', 'Ma & valeur');
        expect(line).toEqual('    <string name="ma_cle">Ma &amp; valeur</string>');
    });

    it('replaces three point with ellipsis character', () => {
        const line = transformer.transformKeyValue('ma_cle', 'Ma valeur...');
        expect(line).toEqual('    <string name="ma_cle">Ma valeur&#8230;</string>');
    });

    it('replaces three point in the middle with ellipsis character', () => {
        const line = transformer.transformKeyValue('ma_cle', 'Ma valeur...à remplacer');
        expect(line).toEqual('    <string name="ma_cle">Ma valeur&#8230;à remplacer</string>');
    });

    it('should not replaces four point with ellipsis character', () => {
        const line = transformer.transformKeyValue('ma_cle', 'Ma valeur....');
        expect(line).toEqual('    <string name="ma_cle">Ma valeur....</string>');
    });
});

describe('AndroidTransformer.insert', () => {
    it('should create resources tag when empty', async () => {
        const xmlHeader = '<?xml version="1.0" encoding="utf-8"?>';
        const result = await transformer.insert('', 'à insérer');
        expect(result).toEqual(
            xmlHeader +
                EOL +
                '<resources>' +
                EOL +
                transformer.AUTOGENERATED_TAG +
                EOL +
                'à insérer' +
                EOL +
                '</resources>',
        );
    });

    it('should insert before end tag when has resource tag', async () => {
        const result = await transformer.insert('<resources>' + EOL + 'aa' + EOL + '</resources>', 'à insérer');
        expect(result).toEqual(
            '<resources>' + EOL + 'aa' + EOL + transformer.AUTOGENERATED_TAG + EOL + 'à insérer' + EOL + '</resources>',
        );
    });

    it('should replace auto generated tag when available', async () => {
        const result = await transformer.insert(
            '<resources>' + EOL + 'aa' + EOL + transformer.AUTOGENERATED_TAG + EOL + 'à effacer' + EOL + '</resources>',
            'à insérer',
        );
        expect(result).toEqual(
            '<resources>' + EOL + 'aa' + EOL + transformer.AUTOGENERATED_TAG + EOL + 'à insérer' + EOL + '</resources>',
        );
    });

    it('inserts after same as before if new value dont change', async () => {
        const before =
            '<resources>' + EOL + 'aa' + EOL + transformer.AUTOGENERATED_TAG + EOL + 'before' + EOL + '</resources>';
        const result = await transformer.insert(before, 'before');
        expect(result).toEqual(before);
    });
});
