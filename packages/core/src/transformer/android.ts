import { EOL } from 'os';
import { OutputFormat } from '../constants.js';
import { Transformer } from './transformer.js';

function setCharAt(str: string, index: number, chr: number) {
    if (index > str.length - 1) return str;
    return str.slice(0, index) + chr + str.slice(index + 1);
}

const androidTransformer: Transformer = {
    outputFormat: OutputFormat.ANDROID,
    transformComment(comment) {
        return '    <!-- ' + comment + ' -->';
    },
    transformKeyValue(key, value) {
        let normalizedValue = value.replace(/%newline%/gi, '\\n');
        normalizedValue = normalizedValue.replace(/'/gi, "\\'");
        normalizedValue = normalizedValue.replace(/%([dfs])/gi, '%#$$$1');
        normalizedValue = normalizedValue.replace(/&/gi, '&amp;');
        normalizedValue = normalizedValue.replace(/\u00A0/gi, '\\u00A0');
        normalizedValue = normalizedValue.replace(/([^.]|^)(\.{3})([^.]|$)/gi, '$1&#8230;$3');

        let ouput = '    <string name="' + key + '">' + normalizedValue + '</string>';

        let currPos = 0;
        let nbOcc = 1;

        while ((currPos = ouput.indexOf('%#$', currPos)) !== -1) {
            ouput = setCharAt(ouput, currPos + 1, nbOcc);
            ++currPos;
            ++nbOcc;
        }

        return ouput;
    },
    transformPluralsValues(key, values) {
        let ouput = '    <plurals name="' + key + '">' + EOL;

        for (const value of values) {
            let normalizedValue = value.value.replace(/%newline%/gi, '\\n');
            normalizedValue = normalizedValue.replace(/'/gi, "\\'");
            normalizedValue = normalizedValue.replace(/%([dfs])/gi, '%#$$$1');
            normalizedValue = normalizedValue.replace(/&/gi, '&amp;');
            normalizedValue = normalizedValue.replace(/\u00A0/gi, '\\u00A0');
            normalizedValue = normalizedValue.replace(/([^.]|^)(\.{3})([^.]|$)/gi, '$1&#8230;$3');

            ouput += '        <item quantity="' + value.getPluralKey() + '">' + normalizedValue + '</item>' + EOL;

            let currPos = 0;
            let nbOcc = 1;

            while ((currPos = ouput.indexOf('%#$', currPos)) !== -1) {
                ouput = setCharAt(ouput, currPos + 1, nbOcc);
                ++currPos;
                ++nbOcc;
            }
        }

        ouput += '    </plurals>';

        return ouput;
    },
    AUTOGENERATED_TAG: '    <!-- AUTO-GENERATED -->',
    async insert(input, newValues) {
        const AUTOGENERATED_TAG = androidTransformer.AUTOGENERATED_TAG;

        if (!input) {
            input = '';
        }

        let output = '';
        const closeTagIndex = input.indexOf('</resources>');
        if (closeTagIndex < 0) {
            output = '<?xml version="1.0" encoding="utf-8"?>' + EOL + '<resources>' + EOL;
        } else {
            const autoGeneratedIndex = input.indexOf(AUTOGENERATED_TAG as string);
            output = input.slice(0, autoGeneratedIndex >= 0 ? autoGeneratedIndex : closeTagIndex);
        }

        output += AUTOGENERATED_TAG + EOL + newValues + EOL + '</resources>';

        return output;
    },
    getFileName: item => `values-${item.toLowerCase()}strings.xml`,
};

export default androidTransformer;
